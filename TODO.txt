* means done
- means TODO
------------------------------------------------------------------------------


WIDGET INTER-DEPENDENCY PROBLEM
------------------------------------------------------------------------------
- solve the IMGUI achilles heel: widgets depending on the state of
other widgets that appear later in the frame.

* cmd record buffers:
	* use case: update widget state before the widget appears in the frame
		* alt: keepalive update callback.
	* use case: dynamic child order in flexbox.
		* alt: TODO: `order` attribute for flex children.
	* use case: dynamic draw order.
		* alt: layers, but they only work with popups currently.
	* con: they break when the recording contains command index refs inside.
		* fix: use relative indexes.
			* but then we have to know to have all refs inside the recording.
		* fix: use ct stack instead of storing ct_i.
* forced re-layouting without redrawing with ui.relayout():
	* pro: solves the later-in-the-frame problem by not solving it.
	* con: doubles the layout time so we can't do it on mouse move or animations.
* keepalive update callbacks:
	* pro: solves the later-in-the-frame problem.
	* con: must split updating and building phases in code, which prevents
	the updating part to create local state for the building part to use.


BUGS UI
------------------------------------------------------------------------------
- force-scroll with popups double-translate bug (repro: h-scroll a grid and
drag a gcol back to the col header)
- text hit clip (repro: hover to the right of the first grid gcol)

TODO GRID
------------------------------------------------------------------------------

TODO UI
------------------------------------------------------------------------------
- scroll-to-view-rect cascade to all scrollboxes

- remove scopes and automatic container scopes and replace them with
	begin_font() end_font()
	begin_bold() end_bold()
	- careful with begin_rec()
	- careful with frames


BUGS
------------------------------------------------------------------------------
- set_cursor() must be set in draw? hittest? where?
- toolbox constrain bug
- toolbox resize bug

- bb on text
- bb on scrollbox?
- negative margins?

- filter out available APIs and state for each phase
	- draw phase should not be able to access state
	- etc.
- make drawing phase stateless
	- empty context in drawing phase!

------------------------------------------------------------------------------

GOALS

* drag & drop UI designer
	- templates with conditionals, repeats and sub-templates
		- template-based widgets
* IMGUI with popups and layouting
* remote screen sharing
	* with input routing
	* with client-side themes

IMGUI

- drawing
	* global z-index
	* local z-index
	* text
	* bg-color
	* border
	* box-shadow
	* images (incl. svg)
- layouting
	* min width & height
	* flexbox fr stretch
	* flexbox min-w/h grow
	* flexbox align
	* flexbox gap
	* stack
	* padding
	* margin
	* text min-w/h
	* popup layouting
	* word-wrapping
	- flex direction
	- flex item order
	- grid fr stretch
	- grid min-w/h grow
	- grid align
	- grid gap
	- transition animations
- mouse
	* hit-test rect
	* hit state
	* hit parents
	* capturing
	* capture state
	* drag & drop
- keyboard
	* focused state
	- tab focusing
	- event bubbling
- text selection
	- drag-select with mouse
- text(area) input
	* put it behind the canvas with correct width & height
		- route keyboard events to it
		* redraw it on canvas with offset and selection
		- reuse a single global input object for all inputs

CHALLENGES

* input on a canvas
- textarea on a canvas
* webgl2 canvas on a 2d canvas
* word wrapping for horizontal text
- rich text on a canvas (inline box model)

PROS vs WEB
- stateless i.e. reactive / IMGUI
	- but with layouting and z-index and no frame lag
- simpler and far more productive layouting and styling models
- global z-index, allowing for:
	- relatively-positioned but painted-last popups
	- painted-last focus ring
- transition animations for in-layout objects, allowing for:
	- animated element moving, drag/drop and selection under/overlays
- streamable and replayable rendering, for sreen-sharing and remote interaction
- fast and memory-efficient with low gc pressure between frames.
- complex widgets built with a combination of box-stacking and custom-drawing.

CONS vs WEB
- must reimplement:
	* scrollbox
	- text selection
	- clipboard ops
	* word-wrapping
	- inline layouting with:
		- u, b, i, strike, sub, sup, h1..6, p, br, hr, float
- no fancy typography:
	- no smart word-wrapping (Thai, auto-hyphenation)
	- no BiDi
	- no smart underline (interrupted by letter descenders)
